<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <springProperty scope="context" name="appName" source="spring.application.name"/>

    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                %black(%d{ISO8601}) %highlight(%-5level) [%green(%X{requestId})] [%blue(%t)] %yellow(%C{1.}):
                %msg%n%throwable
            </Pattern>
        </layout>
    </appender>

    <springProfile name="!logstash &amp; !fluentd">
        <root level="info">
            <appender-ref ref="console"/>
        </root>
    </springProfile>

    <springProfile name="fluentd">
        <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                <providers>
                    <context/> <!--Outputs entries from logback's context -->
                    <logLevel/>
                    <loggerName/>

                    <threadName/>
                    <message/>

                    <mdc/> <!-- MDC variables on the Thread will be written as JSON fields-->
                    <logstashMarkers/> <!-- Useful so we can add extra information for specific log lines as Markers-->
                    <arguments/> <!--or through StructuredArguments-->

                    <stackTrace>
                        <fieldName>stackTrace</fieldName>
                        <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                            <maxDepthPerThrowable>50</maxDepthPerThrowable>
                            <maxLength>2048</maxLength>
                            <shortenedClassNameLength>20</shortenedClassNameLength>
                            <exclude>^sun\.reflect\..*\.invoke</exclude>
                            <exclude>^net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
                            <rootCauseFirst>true</rootCauseFirst>
                        </throwableConverter>
                    </stackTrace>
                </providers>
            </encoder>
        </appender>
        <root level="info">
            <appender-ref ref="stdout"/>
        </root>
    </springProfile>

    <springProfile name="logstash">
        <appender name="logstash_tcp" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
            <destination>${APP_LOGSTASH_HOST:-localhost:5000}</destination>
            <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                <providers>
                    <mdc/> <!-- MDC variables on the Thread will be written as JSON fields-->
                    <context/> <!--Outputs entries from logback's context -->
                    <logLevel/>
                    <loggerName/>

                    <threadName/>
                    <message/>

                    <logstashMarkers/> <!-- Useful so we can add extra information for specific log lines as Markers-->
                    <arguments/> <!--or through StructuredArguments-->

                    <stackTrace>
                        <fieldName>stackTrace</fieldName>
                        <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                            <maxDepthPerThrowable>50</maxDepthPerThrowable>
                            <maxLength>2048</maxLength>
                            <shortenedClassNameLength>20</shortenedClassNameLength>
                            <exclude>^sun\.reflect\..*\.invoke</exclude>
                            <exclude>^net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
                            <rootCauseFirst>true</rootCauseFirst>
                        </throwableConverter>
                    </stackTrace>
                </providers>
            </encoder>
        </appender>
        <root level="info">
            <appender-ref ref="console"/>
            <appender-ref ref="logstash_tcp"/>
        </root>
    </springProfile>

</configuration>
